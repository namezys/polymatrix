PreamblepolyMatrix package has been developed in order to improve R projectwhich, in contrary to well known commercial packages like MATLABand Maple, did not possess a package to manipulate polynomial matrices.Introduction and summaryAs it is well known, polynomial matrices are very important tools in many areas.Some years ago we had to learn that R project did not have a package to handle polynomial matrices. The reason was that R language loses additional attributes of polynomial objects in the case of polynomial matrices. Because of this reason, we decided to develop a package, polyMatrix in order to fill this lack. Because of the above mentioned behavior we had to develop a new implementation.This newly defined class WAS.. IS???!!! has four subclasseswhich are able to store polynomial objects.In the first accepted version we used DOUBLE LIST REPRESENTATION..!!!???but then we decided to improve polyMatrix packageAND..!!!!!!!!!!!!      NICKOLAY, WE WRITE THIS VIGNETTE FOR THE NEW REPRESENTATION,                          SO PLEASE??????         JUST SIMPLY WRITE DOWN HERE IF WE HAVE 4 SUBCLASSES  OR NOT!!!          IF NOT, THAT ONLY MATRICES OF COEFF.!!!>> NICK: The first accepted version includes four different storage method but double list representation is used as mainmethod for manipulation. Further, after the investigation of time and memory consumption,we performed massive refactoring which includes using matrices of coefficients representationinstead of double list and new interface which is similar to native \R language interface for numerical matrices.>> NICK'S NOTE: I don't want to give detail here. I want to write section about storage method.	YES, BUT SOME SMALL DETAIL IS NEEDED IF WE WRITE THE WAY IN THAT package..	THAT'S WHAT I MEAN!!! UP THERE TOO!!!In this polyMatrix package certainly there are implemented basic algebraic methods, algebraic functions, and of course many matrix manipulation routines as well.As in many areas reduction of polynomial matrices into triangular form isvery important, polyMatrix also contains three algorithms to perform triangularization of polynomial matrices: .. //Start from low level way.	??? Function polyMatrix ??? IS THERE - IN THIS PACKAGE - ALSO A FUNCTION WITH THE SAMENAME AS THE PACKAGE???>> NICK: Yes. It's a function `polyMatrix(data, nrow, ncol, degree)`			OK!!!can create a  polynomial matrix from numerical matrices or A polynomial.This works in a similar way as the function used for the creation of numerical matrices.That is, the user must provide basic data like: number of rows or columns, and optional degree.>> NICK: a user must provide basic data, number of rows or columns, and optional degree.>> Also, he can convert numerical matrix into a polynomial. ONE SINGLE POLYNOMIAL???WE DECIDED TO DEVELOPE THIS PACKAGE IN SUCH A WAY AS, WHEN IT IS POSSIBLE TO HAVE SIMILAR IMPLEMENTATION AS THOSE USED FOR NUMERICAL MATRICES IN R. ..???!!!>> NICK'S NOTE: I would like to say that user can use polynomial matrices in the similar way as numerical matrices. Therefore,a user should not think if he works with numerical or polynomial matrices because same code can be used for both types.LET'S DISCUSS THIS - AGAIN MAYBE.. - ???!!!>> NICK: If a user has a matrix, he should not carry about what kind of matrix he has.>> He can use same functions and same operators and they will work as expecttedd for both matrix types.>> TODOAs a first example let us create a polynomial matrix HAVING ONLY zeroS AS elements:> polyMatrix(0, 2, 3)       [,1]   [,2]   [,3][1,]      0      0      0[2,]      0      0      0This example shows filling the polynomial matrix by using a vector [1, 2, 3, 4, 5, 6].> polyMatrix(1:6, 2, 3)       [,1]   [,2]   [,3][1,]      1      3      5[2,]      2      4      6A polynomial matrix can also be created from one single polynomial "1 + 2x":> polyMatrix(polynom::polynomial(c(1, 2)), 2, 3)         [,1]     [,2]     [,3][1,]   1 + 2x   1 + 2x   1 + 2x[2,]   1 + 2x   1 + 2x   1 + 2xIt is important to mention here, that using this function with more polynomials as input, would be too complicated, besides also inconvenient.>> NICK: but useless and inconvenient.For such cases there are implemented other operations like: [parse.polyMatrix()].This polyMatrix function can also be used having as input matrices of coefficients.>> NICK: input is perfectIn this example matrix m is of size 2x6, consisting of three matrices of coefficientsof sizes 2x2, from lower to higher degree.In this case it is necessary to provide the number of row, column and degree: nrow, ncol and degree.> m <- matrix(c(+   1, 2, 0, 2, 1, 0,+   0, 1, 0, 0, 1, 1+ ), 2, 6, byrow = TRUE)> polyMatrix(m, 2, 2, 2)          [,1]      [,2][1,]   1 + x^2    2 + 2x[2,]       x^2   1 + x^2As can be seen in the examples above, we print out polynomial matricesin a similar way as there are printed the numerical matrices.Working with matrices of coefficients ???  CAN BE - MAYBE... - inconvenient for people. ???>> NICK: may be inconvenient for humans. 		HUMANS ARE NOT MY FAVORITS !!!Therefore we provide a method to parse both polynomials and polynomial matrices from strings.Lets start by polynomials:> parse.polynomial("123")123		FOR ME THIS DOES NOT HAVE TOO MUCH SENSE!!! THE PRINTING..???> parse.polynomial("123 + x" )123 + x> parse.polynomial("123 + x -   .2e2 x^2  +   1e-3x^7" )123 + x - 20*x^2 + 0.001*x^7You can use scientific notation for coefficients. WHAT DID YOU WANT TO SAY, WHAT DOES IT MEAN THIS SCIENTIFIC NOTATION???11.2e-19>> TODO exammppleAs spaces will be ignored, you can use spaces in order to make more readable OR.. for simplification.Also it is possible to provide another name for a variable.> parse.polynomial("123 + y" , var="y")123 + xBut as parsed polynomial doesn't store variable name, the output will contain 'x' instead of 'y'.In a similar way we can have as input a polynomial matrix.We provided different input methods which can be used by TeX writer as well as by R developer.Lines can be split by new line command, `\n`>> NICK NOTE: I checked, split/split/split is irregular verb> parse.polyMatrix(+   "1 + x,    2\n+       -2,  x^2"+ )        [,1]   [,2][1,]   1 + x      2[2,]      -2    x^2Each item in a line can be split by "," or ";" or "&".Each line can be split by "\n" or "\\".	THIS LOOKS DIFFERENT THEN THATABOVE.. SOOOO???!!!>> NICK NOTE: No, same way. I want to say that '\\' can be used as `\n`. It was done for compatibility with LaTex	THEN WE SHOULD SAY THIS ABOVE, NOT 2 TIMES ABOUT THE SAME THING..Combination of "&" and "\\" allows to parse TeX style matrices.> parse.polyMatrix(+   "1 + x&    2\\+       -2&  x^2"+ )        [,1]   [,2][1,]   1 + x      2[2,]      -2    x^2However, to split one string into lines in this way would not be comfortableand would be hard to read.Because of this, we added the ability to pass in multiple stringswhich will be treated as different rows of the matrix.>> TODO emphasize that , is not a ppart of string but arg separator> parse.polyMatrix(+   "1 + x&    2",+     " -2&  x^2"+ )        [,1]   [,2][1,]   1 + x      2[2,]      -2    x^2This function supports and offers us  /OR NOTIFIES US - NOT BOTH, WHICH ONE??? helpful parsing errors:> parse.polyMatrix(+   "1 + y&    2\\+       -2&  x^2"+ )Fail to parse polyMatrix: invalid term at position 2 in item [1, 1]parse.polyMatrix(+   "1 + x,    2",  I DON'T UNDERSTAND HERE EITHER AS & IS MISSING HERE...+     " -2)  x^2"+ )Fail to parse polyMatrix: expect '+' or '-' after term at position 1 in item [2, 1]>> NICK NOTE: you can use '&' or ','; both are supported  MAYBE IS GOOD HERE TO DRAW THE ATTENTION ON IT..Using parse.polyMatrix is preferable for code WHAT DID YOU MEAN HERE??? which can be readed or edited by user.\>> NICK If user wants to work with polymatrix forhimself, it's better to use parse function.>> If he wants to work with low level matries of coeffiicent or bind with another ppackages,>> it's better to use polyMatrix directly.polyMatrix can be used AND MAYBE SHOULD BE USED, YOU MEAN.. for creation of simple matrices like the zero matrix or  for low level manipulation of coefficient matrices.>> NICK NOTE: A user can decide what he want to use. He can use `parse` as well, but using polyMatrix is simplest waylike:+ polyMatrix(1, 3, 6) -> matrix of size 3x6 there all elements are 1+ polyMatrix(m) -> where m is a numerical matrix,this code will return a polynomial matrix haveing the same cooeficint as nuemrical maxtix with same values as input matrix>> TODO exampple	THIS ABOVE IS NOT CLEAR AT ALL!!!!!!!!!!!!!! ABOVE WITH parse.polyMatrix you givemore complex ex. ...SOOOOOOOOOOOOO WE NEED TO DISCUSS THIS!!!!!!!!!!A coefficient matrix can be accessed through slot WHAT DOES THIS MEAN??? YOU MEAN @ ??? coef:>> NICK NOTE: Yes. I want to write a little bit more about it in description of format> pm <- parse.polyMatrix(+   "1 + x&    2",+     " -2&  x^2"+ )> pm@coef     [,1] [,2] [,3] [,4] [,5] [,6][1,]    1    2    1    0    0    0 SHOULD BE DELIMITED AS ABOVE AS WE DISCUSSED..[2,]   -2    0    0    0    0    1>> NICK NOTE: Not, it's just output in R console	YES, BUT IT IS NOT UNDERSTANDABLE LIKE THIS.. THEN MAYBE  AFTER THIS ..TO BE RECOGNIZABLEBut it is not necessary to (access the slots) USE THIS KIND OF NOTATIONTHEN WHY IS IT HERE??? work with this slot???!!!.>> NICK NOTE: Not exactly, it's not about notation. It's about object-orientation type system notation.We overridden  IT AND .. LIKE THIS HAS NO SENSE.. a lot of function to use.>> in oorder to be useable>> NICK: to get access to coefficient matrices	I DON'T UNDERSTAND HERE EITHER WHAT DO YOU WANT TO SAY.. SORRY...To get the coefficients as a matrix you can use "[["> pm[[0]]     [,1] [,2][1,]    1    2[2,]   -2    0> pm[[1]]     [,1] [,2][1,]    1    0[2,]    0    0> pm[[2]]     [,1] [,2][1,]    0    0[2,]    0    1You can't change it using "[[<-" operator.  WHAT DO YOU MEAN BY THIS???>> TODO example>> NICK NOTE: can't do like pm[[2]] <- 123 and expect that 2nd degree conefficient will be 123 for all elements of matrix pm			I DON'T UNDERSTAND..You can subscribe AGAIN, WHAT DID YOU WANT TO SAY HERE??? matrix in different way as a numerical matrix:>> TODO check language>> NICK NOTE: probably "Extract or Replace Parts of an polynomial matrix"	FINALLY, I UNDERSTAND THIS..* by giving the exact index	I WOULD LEAVE OUT THE WORD: exact> pm[1, 2][1] 2> pm[2, 2]x^2* by column> pm[,2]       [,1][1,]      2[2,]    x^2* by row> pm[1,]        [,1]   [,2][1,]   1 + x      2* by vector of indices> pm[1:2, 2]       [,1][1,]      2[2,]    x^2* by boolean indices> pm[c(TRUE, FALSE), c(TRUE, FALSE)]	HERE IS NOT CLEAR TO ME...1 + xMatrix item can be assigned as well> pm        [,1]    [,2][1,]   1 + x   1 + x[2,]      -2     x^2> pm[1, 2][1] 2> pm[1, 2] <- parse.polynomial("1-x + x^3")> pm        [,1]          [,2][1,]   1 + x   1 - x + x^3[2,]      -2           x^2It is possible to replace a submatrix by a number or another term/expression	I WOULD SAY..> pm[,2] <- 5> pm        [,1]   [,2][1,]   1 + x      5[2,]      -2      5as in this example, you can use a polymatrix as well (in this example we replace first row)  OK!!!> pm[1, ] <- parse.polyMatrix("7 + 4 x, 3 x^3")> pm         [,1]   [,2][1,]   7 + 4x   3x^3[2,]       -2      5## InterfaceHere you can find a short description of the  `polyMatrix` class interfaceAlmost all methods work in the same way as for numerical  matrices:* `dim`, `nrow`, `ncol` are used to get matrix dimension* `cbind`, `rbind`* `det`* `predict`: getS THE numerical value of A polynomial matrix in A point  ???!!!* `round`* `show`: printS out THE polynomial matrix* `t`: transposeOverridden operations:* `[`: element or part of matrix* `[[`: coefficient matrix* "+", "-"* "==", "<="* "%*%": matrix multiplication* "*": per element multiplicationNew methods was HAVE BEEN introduced to implement polynomial property* `degree`, `matrix.degree` are used to get degree of polynomials* `is.zero`	EXPLANATION - AS ABOVE???!!!Additional functions:* `adjoint`: Adjoint numerical or polynomial matrix.* `cofactor`:	???  !!!* `proper`: Proper property of the polynomial matrix* `charpolynom`: The characteristic polynomial of a matrix (both numerical and polunomial)* `GCD`, `LCM`* `tr`: trace of matrix* `parse.*`## Polynomial matrix representationThe polynomial matrix type is implemented using S4 object type system of \R language.The `polyMatrix` object contains only 2 slots: 			I REALLY DON'T UNDERSTAND WHAT DO YOU MEAN BY THIS slot??? SOOOOOOOOOOOOO???!!!CHECK THE WORD YOU WANT TO SAY... TRANSLATE FROM RUSSIAN.. OR..* `coef`: matrix which stores matrices of coefficients* `ncol`: number of column of polynomial matricesTherefore the number of matrices of coefficients and THE  degree of a polynomial matrix (YOU MEAN??? .. DO YOU HAVE MATRICES OF DEGREE???  ) can be calculated from the size of the matrix `coef`and number of columns `ncol`.According to the encapsulation principle of OOP, (WHAT IS THIS??? SOME REF. NEEDED) a user should not get access to 	-	slots  -  	???!!! YOU MEAN CELLS, OR???	of the object instance directly.Instead of it, they should use only getter???   .GET METHODS, OR GET. .. methods??? GETTER HAS NO SENSEThis will allow to change internal class implementation 				with affection of user code.WHAT DID YOU WANT TO SAY HERE???>> TODD more about incapsulationWe can't guaranty that in A further version will not change it	WHAT WILL NOT CCHANGE???.### Example>> NICK NOTE: further I will change it to LaTex>> Also, I will try to use the same matrix as we used beforeLet us have the polynomial matrix PM:\[PM =+   "1 + x&    2\\+       -2&  x^2"\]This matrix can be represented using matrices of coefficients as $PM = A_0 + A_1 x + A_2 x^2$ where	 \[  A_0 =[1,]    1    2[2,]   -2    0A_1 =[1,]    1    0[2,]    0    0A_2 =[1,]    0    0[2,]    0    1\]Using such  matrices is the most efficient way of working with any KIND OF data in R language. Therefore, our low level implementationuses built matrix operations.  HERE IS NOT FULLY CLEAR : USES THE BUILT INMATRIX OPERATIONS???In order to store all matrices $A_0, A_1, A_2$ we build one matrix C\[C = (A_0 | A_1 | A_2) =[1,]    1    2  |  1    0  |  0    0[2,]   -2    0  |  0    0  |  0    1\]Finally, we store matrix C in the slot  ???!!!  `coef` and number of column 2 in the slot `ncol`.## Implementation of the operations I WOULD SAY HERE>> NICK NOTE: Just short ideas of operation implementation"+" and "-" can be implemented as "+" or "-" of matrix `coef`Matrix multiplication is more tricky. Let US!!! not WE!!! have 2 matrices, $P_0 = A_0 + A_1 x + A_2 x^2$ and $P_1 = B_0 + B_1 x$:\[P_0 \times P_1 = (A_0 + A_1 x + A_2 x^2) \times (B_0 + B_1 x) =(A_0 + B_0) + (A_1 \times B_0 + A_0 \times B_1) x + (A_2 \times B_0 + A_1 \times B_1) x^2 + A_2 \times B_1 x^3\]It can be seen, that matrix multiplication can be implemented as a sequence of numerical matrix multiplications and summations.