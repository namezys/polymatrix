
Preamble

polyMatrix package has been developed in order to improve R project
which, in contrary to well known commercial packages like MATLAB
and Maple, did not possess a package to manipulate polynomial matrices.

Introduction and summary

As it is well known, polynomial matrices are very important tools in many areas.
Some years ago we had to learn that R project did not have a package to 
handle polynomial matrices. The reason was that R language loses additional 
attributes of polynomial objects in the case of polynomial matrices. 
Because of this reason, we decided to develop a package, polyMatrix in order to fill this 
lack. Because of the above mentioned behavior we had to develop a new implementation.

This newly defined class WAS.. IS???!!! has four subclasseswhich are able to store 
polynomial objects.
In the first accepted version we used DOUBLE LIST REPRESENTATION..!!!???
but then we decided to improve polyMatrix package
AND..!!!!!!!!!!!!

>> NICK: The first accepted version includes four different storage method but double list representation is used as main
method for manipulation. Further, after the investigation of time and memory consumption,
we performed massive refactoring which includes using matrices of coefficients representation
instead of double list and new interface which is similar to native \R language interface for numerical matrices.
>> NICK'S NOTE: I don't want to give detail here. I want to write section about storage method.

In this polyMatrix package certainly there are implemented basic algebraic methods, 
algebraic functions, and of course many matrix manipulation routines as well.
As in many areas reduction of polynomial matrices into triangular form is
very important, polyMatrix also contains three algorithms to perform triangularization 
of polynomial matrices: ..
 

//Start from low level way.

??? Function polyMatrix ??? IS THERE - IN THIS PACKAGE - ALSO A FUNCTION WITH THE SAME
NAME AS THE PACKAGE???
>> NICK: Yes. It's a function `polyMatrix(data, nrow, ncol, degree)`

can create polynomial matrix from numerical matrices or A polynomial.

This works in a similar way as the function used for creation of numerical matrices
>> NICK: a user must provide basic data, number of rows or columns, and optional degree.
>> Also, he can convert numerical matrix into a polynomial.

WE DECIDED TO DEVELOPE THIS PACKAGE IN SUCH A WAY 
AS, WHEN IT IS POSSIBLE TO HAVE SIMILAR IMPLEMENTATION AS THOSE 
USED FOR NUMERICAL MATRICES IN R. ..???!!!
>> NICK'S NOTE: I would like to say that user can use polynomial matrices in the similar way as numerical matrices. Therefore,
a user should not think if he works with numerical or polynomial matrices because same code can be used for both types.

As a first example let us create a polynomial matrix with zero elements:

> polyMatrix(0, 2, 3)
       [,1]   [,2]   [,3]
[1,]      0      0      0
[2,]      0      0      0

This example shows filling the polynomial matrix by using a vector [1, 2, 3, 4, 5, 6].

> polyMatrix(1:6, 2, 3)
       [,1]   [,2]   [,3]
[1,]      1      3      5
[2,]      2      4      6

A polynomial matrix can also be created from one single polynomial "1 + 2x":

> polyMatrix(polynom::polynomial(c(1, 2)), 2, 3)
         [,1]     [,2]     [,3]
[1,]   1 + 2x   1 + 2x   1 + 2x
[2,]   1 + 2x   1 + 2x   1 + 2x

It is important to mention here, that using this function 
with more polynomials as input, would be too complicate
>> NICK: but useless and inconvenient.
For such cases there are implemented other operations like [parse.polyMatrix()].

This polyMatrix function can also be used having as input matrices of coefficients.
>> NICK: input is perfect
In this example matrix m is of size 2x6, consisting of three matrices of coefficients
of sizes 2x2, from lower to higher degree.
In this case it is necessary to provide number of row, column and degree: nrow, ncol and degree.

> m <- matrix(c(
+   1, 2, 0, 2, 1, 0,
+   0, 1, 0, 0, 1, 1
+ ), 2, 6, byrow = TRUE)
> polyMatrix(m, 2, 2, 2)
          [,1]      [,2]
[1,]   1 + x^2    2 + 2x
[2,]       x^2   1 + x^2

As can be seen in the examples above, we print out of polynomial matrices
in a similar way as are printed the numerical matrices.

Working with matrices of coefficients ???  CAN BE - MAYBE... - inconvenient for people. ???
>> NICK: may be inconvenient for humans.
Therefore we provide a method to parse both polynomials and polynomial matrices from strings.

Lets start by polynomials:
> parse.polynomial("123")
123
> parse.polynomial("123 + x" )
123 + x
> parse.polynomial("123 + x -   .2e2 x^2  +   1e-3x^7" )
123 + x - 20*x^2 + 0.001*x^7

You can use scientific notation for coefficients. WHAT DID YOU SAY, 
WHAT DOES IT MEAN THIS SCIENTIFIC NOTATION???

As spaces will be ignored, you can use spaces in order to make more readable OR.. for simplification.

Also it is possible to provide another name for a variable.
> parse.polynomial("123 + y" , var="y")
123 + x

But as parsed polynomial doesn't store variable name, the output will contain 'x' instead of 'y'.

In a similar way we can have as input a polynomial matrix.
We provided different input methods which can be used by TeX writer 
as well as by R developer.

Lines can be split by new line command, `\n`
>> NICK NOTE: I checked, split/split/split is irregular verb

> parse.polyMatrix(
+   "1 + x,    2\n
+       -2,  x^2"
+ )
        [,1]   [,2]
[1,]   1 + x      2
[2,]      -2    x^2

Each item in a line can be split by "," or ";" or "&".
Each line can be split by "\n" or "\\".	THIS LOOKS DIFFERENT THEN THAT
ABOVE.. SOOOO???!!!
>> NICK NOTE: No, same way. I want to say that '\\' can be used as `\n`. It was done for compatibility with LaTex

Combination of "&" and "\\" allows to parse TeX style matrices.
> parse.polyMatrix(
+   "1 + x&    2\\
+       -2&  x^2"
+ )
        [,1]   [,2]
[1,]   1 + x      2
[2,]      -2    x^2

However, to split one string into lines in this way would not be not comfortable
and would be hard to read.
Because of this, we added the ability to pass in multiple strings
which will be treated as different rows of the matrix.

> parse.polyMatrix(
+   "1 + x&    2",
+     " -2&  x^2"
+ )
        [,1]   [,2]
[1,]   1 + x      2
[2,]      -2    x^2


This function supports and offers or notifies us helpful parsing errors:

> parse.polyMatrix(
+   "1 + y&    2\\
+       -2&  x^2"
+ )
Fail to parse polyMatrix: invalid term at position 2 in item [1, 1]

parse.polyMatrix(
+   "1 + x,    2",  I DON'T UNDERSTAND HERE EITHER AS & IS MISSING HERE...
+     " -2)  x^2"
+ )
Fail to parse polyMatrix: expect '+' or '-' after term at position 1 in item [2, 1]
>> NICK NOTE: you can use '&' or ','; both are supported

Using parse.polyMatrix is preferable for code WHAT DID YOU MEAN HERE??? which can be readed or edited by user.\

polyMatrix can be used AND MAYBE SHOULD BE USED, YOU MEAN.. for creation of simple matrices like the zero matrix or using 
for low level manipulation of coefficient matrices.
>> NICK NOTE: A user can decide what he want to use. He can use `parse` as well, but the using polyMatrix is simplest way
like:
+ polyMatrix(1, 3, 6) -> matrix of size 3x6 there all elements are 1
+ polyMatrix(m) -> there m is a numerical matrix will return polynomial matrix with same values as input matrix

A coefficient matrix can be accessed through slot WHAT DOES THIS MEAN??? YOU MEAN @ ??? coef:
>> NICK NOTE: Yes. I want to write a little bit more about it in description of format
> pm <- parse.polyMatrix(
+   "1 + x&    2",
+     " -2&  x^2"
+ )
> pm@coef
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    2    1    0    0    0 SHOULD BE DELIMITED AS ABOVE AS WE DISCUSSED..
[2,]   -2    0    0    0    0    1
>> NICK NOTE: Not, it's just output in R console

But it is not necessary to USE THIS KIND OF NOTATION 
THEN WHY IS IT HERE??? work with this slot???!!!.
>> NICK NOTE: Not exactly, it's not about notation. It's about object-orientation type system notation.
We overridden  IT AND .. LIKE THIS HAS NO SENSE.. a lot of function to use.
>> NICK: to get access to coefficient matrices

To get the coefficients as a matrix you can use "[["
> pm[[0]]
     [,1] [,2]
[1,]    1    2
[2,]   -2    0
> pm[[1]]
     [,1] [,2]
[1,]    1    0
[2,]    0    0
> pm[[2]]
     [,1] [,2]
[1,]    0    0
[2,]    0    1

You can't change it using "[[<-" operator.  WHAT DO YOU MEAN BY THIS???
>> NICK NOTE: can't do like pm[[2]] <- 123 and expect that 2nd degree conefficient will be 123 for all elements of matrix pm

You can subscribe AGAIN, WHAT DID YOU WANT TO SAY HERE??? matrix in different way as a numerical matrix:
>> NICK NOTE: probably "Extract or Replace Parts of an polynomial matrix"

* by giving the exact index
> pm[1, 2]
[1] 2
> pm[2, 2]
x^2

* by column
> pm[,2]
       [,1]
[1,]      2
[2,]    x^2

* by row
> pm[1,]
        [,1]   [,2]
[1,]   1 + x      2

* by vector of indices
> pm[1:2, 2]
       [,1]
[1,]      2
[2,]    x^2

* by boolean indices
> pm[c(TRUE, FALSE), c(TRUE, FALSE)]	HERE IS NOT CLEAR TO ME...
1 + x

Matrix item can be assigned as well
> pm
        [,1]    [,2]
[1,]   1 + x   1 + x
[2,]      -2     x^2
> pm[1, 2]
[1] 2
> pm[1, 2] <- parse.polynomial("1-x + x^3")
> pm
        [,1]          [,2]
[1,]   1 + x   1 - x + x^3
[2,]      -2           x^2



Also it's possible to replace submatrix
> pm[,2] <- 5
> pm
        [,1]   [,2]
[1,]   1 + x      5
[2,]      -2      5

and you can use polymatrix as well (in this example we replace first row)
> pm[1, ] <- parse.polyMatrix("7 + 4 x, 3 x^3")
> pm
         [,1]   [,2]
[1,]   7 + 4x   3x^3
[2,]       -2      5


## Interface

Here you can find short description of `polyMatrix` class interface

Almost all methods works in the same way as for numerical  matrices:
* `dim`, `nrow`, `ncol` are used to get matrix dimension
* `cbind`, `rbind`
* `det`
* `predict`: get numerical value of polynomial matrix in point
* `round`
* `show`: print out polynomial matrix
* `t`: transpose

Overridden operations:
* `[`: element or part of matrix
* `[[`: coefficient matrix
* "+", "-"
* "==", "<="
* "%*%": matrix multiplication
* "*": per element multiplication

New methods was introduced to implement polynomial property
* `degree`, `matrix.degree` are used to get degree of polynomials
* `is.zero`

Additional function:
* `adjoint`: Adjoint numerical or polynomial matrix.
* `cofactor`:
* `proper`: Proper property of polynomial matrix
* `charpolynom`: Characteristic polynomial of matrix (both numerical and polunomial)
* `GCD`, `LCM`
* `tr`: trace of matrix
* `parse.*`


## Polynomial matrix representation

Polynomial matrix type is implemented using S4 object type system of \R language.

The `polyMatrix` objects contains only 2 slots:
* `coef`: matrix which stores matrices of coefficients
* `ncol`: number of column of polynomial matrices

Therefore number of matrices of coefficients and degree can be calculated from size of matrix `coef`
and number of columns `ncol`.

According encapsulation principle of OOP, a user should not get access to slots of the object instance directly.
Instead of it, they should use only getter methods.
This will allow to change internal class implementation with affection of user code.
We can't guaranty that in further version will not change it.

### Example

>> NICK NOTE: further I will change it to LaTex
>> Also, I will try to use same matrix as we used before

Let us having polynomial matrix PM:
\[
PM =
+   "1 + x&    2\\
+       -2&  x^2"
\]

This matrix can be represented using matrices of coefficients as $PM = A_0 + A_1 x + A_2 x^2$ there
\[
A_0 =
[1,]    1    2
[2,]   -2    0
A_1 =
[1,]    1    0
[2,]    0    0
A_2 =
[1,]    0    0
[2,]    0    1
\]

Using matrices is the most efficient way to working with any data in R language. Therefore, our low level implementation
uses matrix operations.

For storing all matrix $A_0, A_1, A_2$ we build one matrix C
\[
C = (A_0 | A_1 | A_2) =
[1,]    1    2  |  1    0  |  0    0
[2,]   -2    0  |  0    0  |  0    1
\]

Finally, we store matrix C in the slot `coef` and number of column 2 in the slot `ncol`.

## Operations implementation

>> NICK NOTE: Just short ideas of operation implementation

"+" and "-" can be implemented as "+" or "-" of matrix `coef`

Matrix multiplication is more tricky. Let we have 2 matrix $P_0 = A_0 + A_1 x + A_2 x^2$ and $P_1 = B_0 + B_1 x$:
\[
P_0 \times P_1 = (A_0 + A_1 x + A_2 x^2) \times (B_0 + B_1 x) =
(A_0 + B_0) + (A_1 \times B_0 + A_0 \times B_1) x + (A_2 \times B_0 + A_1 \times B_1) x^2 + A_2 \times B_1 x^3
\]

It simple seen, that matrix multiplication can be implemented as a sequence of numerical matrix multiplications and summations.





